#
# Please run the following command for opening a page with more information about this configuration file:
# idf.py docs -sp api-reference/kconfig.html
#
mainmenu "Espressif IoT Development Framework Configuration"

config PARTITION_TABLE_OFFSET
    hex
    default 0x8000

config APP_RETRIEVE_LEN_ELF_SHA
    int
    default 16

config APP_BUILD_USE_FLASH_SECTIONS
    # always mapping flash for executing code / readonly data
    bool
    default y

config IDF_ENV_FPGA
    bool
    default n

# esp_attr.h: __attribute__((deprecated(REASON))) if this enables, set ALWAYS true
config IDF_CI_BUILD
    bool
    default y

config IDF_TARGET_ARCH_RISCV
    bool
    default "n"

config IDF_TARGET_ARCH_XTENSA
    bool
    default "n"

config IDF_TARGET_ARCH
    string
    default "riscv" if IDF_TARGET_ARCH_RISCV
    default "xtensa" if IDF_TARGET_ARCH_XTENSA

config IDF_TARGET
    string
    default "$IDF_TARGET"

config IDF_TARGET_LINUX
    bool
    default "y" if IDF_TARGET="linux"

config IDF_TARGET_ESP32
    bool
    default "y" if IDF_TARGET="esp32"
    select IDF_TARGET_ARCH_XTENSA

config IDF_TARGET_ESP32S2
    bool
    default "y" if IDF_TARGET="esp32s2"
    select IDF_TARGET_ARCH_XTENSA

config IDF_TARGET_ESP32S3
    bool
    default "y" if IDF_TARGET="esp32s3"
    select IDF_TARGET_ARCH_XTENSA

config IDF_TARGET_ESP32C3
    bool
    default "y" if IDF_TARGET="esp32c3"
    select IDF_TARGET_ARCH_RISCV

config IDF_TARGET_ESP32H4
    bool
    default "y" if IDF_TARGET="esp32h4"
    select IDF_TARGET_ARCH_RISCV

config IDF_TARGET_ESP32C2
    bool
    default "y" if IDF_TARGET="esp32c2"
    select IDF_TARGET_ARCH_RISCV

config IDF_TARGET_ESP32C6
    bool
    default "y" if IDF_TARGET="esp32c6"
    select IDF_TARGET_ARCH_RISCV

config IDF_TARGET_LINUX
    bool
    default "y" if IDF_TARGET="linux"

config IDF_FIRMWARE_CHIP_ID
    hex
    default 0x0000 if IDF_TARGET_ESP32
    default 0x0002 if IDF_TARGET_ESP32S2
    default 0x0005 if IDF_TARGET_ESP32C3
    default 0x0009 if IDF_TARGET_ESP32S3
    default 0x000A if IDF_TARGET_ESP32H4_BETA_VERSION_1
    default 0x000C if IDF_TARGET_ESP32C2
    default 0x000D if IDF_TARGET_ESP32C6
    default 0x000E if IDF_TARGET_ESP32H4_BETA_VERSION_2 # ESP32-TODO: IDF-3475
    default 0xFFFF

# orsource "$IDF_PATH/components/soc/$IDF_TARGET/include/soc/Kconfig.soc_caps.in"

menu "Bootloader"
    choice BOOTLOADER_COMPILER_OPTIMIZATION
        prompt "Bootloader optimization Level"
        default BOOTLOADER_COMPILER_OPTIMIZATION_FULL

        config BOOTLOADER_COMPILER_OPTIMIZATION_NONE
            bool "-O0: none optimization"
        config BOOTLOADER_COMPILER_OPTIMIZATION_BASIC
            bool "-O1: basic optimization"
        config BOOTLOADER_COMPILER_OPTIMIZATION_PERF
            bool "-O2 performance optimization"
        config BOOTLOADER_COMPILER_OPTIMIZATION_FULL
            bool "-O3 full optimization"
        config BOOTLOADER_COMPILER_OPTIMIZATION_SIZE
            bool "-Os size optimization"
        config BOOTLOADER_COMPILER_OPTIMIZATION_DEFAULT
            bool "-Og debug optimization"
    endchoice

    choice BOOTLOADER_LOG_LEVEL
        bool "Bootloader log verbosity"
        default BOOTLOADER_LOG_LEVEL_DEBUG

        config BOOTLOADER_LOG_LEVEL_NONE
            bool "No output"
        config BOOTLOADER_LOG_LEVEL_ERROR
            bool "Error"
        config BOOTLOADER_LOG_LEVEL_WARN
            bool "Warning"
        config BOOTLOADER_LOG_LEVEL_INFO
            bool "Info"
        config BOOTLOADER_LOG_LEVEL_DEBUG
            bool "Debug"
        # config BOOTLOADER_LOG_LEVEL_VERBOSE   no verbose logs for bootloader
        #     bool "Verbose"
    endchoice

    config BOOTLOADER_LOG_LEVEL
        int
        default 0 if BOOTLOADER_LOG_LEVEL_NONE
        default 1 if BOOTLOADER_LOG_LEVEL_ERROR
        default 2 if BOOTLOADER_LOG_LEVEL_WARN
        default 3 if BOOTLOADER_LOG_LEVEL_INFO
        default 4 if BOOTLOADER_LOG_LEVEL_DEBUG
        default 5 if BOOTLOADER_LOG_LEVEL_VERBOSE

    config BOOTLOADER_SPI_CUSTOM_WP_PIN
        bool "Use custom SPI Flash WP Pin when flash pins set in eFuse (read help)"
        depends on IDF_TARGET_ESP32 && (ESPTOOLPY_FLASHMODE_QIO || ESPTOOLPY_FLASHMODE_QOUT)
        default y if BOOTLOADER_SPI_WP_PIN != 7  # backwards compatibility, can remove in IDF 5
        default n
        help
            This setting is only used if the SPI flash pins have been overridden by setting the eFuses
            SPI_PAD_CONFIG_xxx, and the SPI flash mode is QIO or QOUT.

            When this is the case, the eFuse config only defines 3 of the 4 Quad I/O data pins. The WP pin (aka
            ESP32 pin "SD_DATA_3" or SPI flash pin "IO2") is not specified in eFuse. The same pin is also used
            for external SPIRAM if it is enabled.

            If this config item is set to N (default), the correct WP pin will be automatically used for any
            Espressif chip or module with integrated flash. If a custom setting is needed, set this config item to
            Y and specify the GPIO number connected to the WP.

    config BOOTLOADER_SPI_WP_PIN
        int "Custom SPI Flash WP Pin"
        range 0 33
        default 7
        depends on IDF_TARGET_ESP32 && (ESPTOOLPY_FLASHMODE_QIO || ESPTOOLPY_FLASHMODE_QOUT)
        #depends on BOOTLOADER_SPI_CUSTOM_WP_PIN  # backwards compatibility, can uncomment in IDF 5
        help
            The option "Use custom SPI Flash WP Pin" must be set or this value is ignored

            If burning a customized set of SPI flash pins in eFuse and using QIO or QOUT mode for flash, set this
            value to the GPIO number of the SPI flash WP pin.

    config BOOTLOADER_FLASH_XMC_SUPPORT
        bool "Enable the support for flash chips of XMC (READ HELP FIRST)"
        default y
        help
            Perform the startup flow recommended by XMC. Please consult XMC for the details of this flow.
            XMC chips will be forbidden to be used, when this option is disabled.
            ** DON'T DISABLE THIS UNLESS YOU KNOW WHAT YOU ARE DOING. **

    menu "Cache config"
        choice ESP32S3_INSTRUCTION_CACHE_SIZE
            prompt "Instruction cache size"
            default ESP32S3_INSTRUCTION_CACHE_32KB
            help
                Instruction cache size to be set on application startup.
                If you use 16KB instruction cache rather than 32KB instruction cache,
                then the other 16KB will be managed by heap allocator.

            config ESP32S3_INSTRUCTION_CACHE_16KB
                bool "16KB"
            config ESP32S3_INSTRUCTION_CACHE_32KB
                bool "32KB"
        endchoice

        config ESP32S3_INSTRUCTION_CACHE_SIZE
            hex
            default 0x4000 if ESP32S3_INSTRUCTION_CACHE_16KB
            default 0x8000 if ESP32S3_INSTRUCTION_CACHE_32KB

        choice ESP32S3_ICACHE_ASSOCIATED_WAYS
            prompt "Instruction cache associated ways"
            default ESP32S3_INSTRUCTION_CACHE_8WAYS
            help
                Instruction cache associated ways to be set on application startup.

            config ESP32S3_INSTRUCTION_CACHE_4WAYS
                bool "4 ways"
            config ESP32S3_INSTRUCTION_CACHE_8WAYS
                bool "8 ways"
        endchoice

        config ESP32S3_ICACHE_ASSOCIATED_WAYS
            int
            default 4 if ESP32S3_INSTRUCTION_CACHE_4WAYS
            default 8 if ESP32S3_INSTRUCTION_CACHE_8WAYS

        choice ESP32S3_INSTRUCTION_CACHE_LINE_SIZE
            prompt "Instruction cache line size"
            default ESP32S3_INSTRUCTION_CACHE_LINE_32B
            help
                Instruction cache line size to be set on application startup.

            config ESP32S3_INSTRUCTION_CACHE_LINE_16B
                bool "16 Bytes"
                depends on ESP32S3_INSTRUCTION_CACHE_16KB
            config ESP32S3_INSTRUCTION_CACHE_LINE_32B
                bool "32 Bytes"
        endchoice

        config ESP32S3_INSTRUCTION_CACHE_LINE_SIZE
            int
            default 16 if ESP32S3_INSTRUCTION_CACHE_LINE_16B
            default 32 if ESP32S3_INSTRUCTION_CACHE_LINE_32B

        config ESP32S3_INSTRUCTION_CACHE_WRAP
            bool       ## TODO IDF-4307
            default "n"
            depends on !SPIRAM_ECC_ENABLE
            help
                If enabled, instruction cache will use wrap mode to read spi flash or spi ram.
                The wrap length equals to ESP32S3_INSTRUCTION_CACHE_LINE_SIZE.
                However, it depends on complex conditions.

        choice ESP32S3_DATA_CACHE_SIZE
            prompt "Data cache size"
            default ESP32S3_DATA_CACHE_64KB
            help
                Data cache size to be set on application startup.
                If you use 32KB data cache rather than 64KB data cache,
                the other 32KB will be added to the heap.

            config ESP32S3_DATA_CACHE_16KB
                bool "16KB"
            config ESP32S3_DATA_CACHE_32KB
                bool "32KB"
            config ESP32S3_DATA_CACHE_64KB
                bool "64KB"
        endchoice

        config ESP32S3_DATA_CACHE_SIZE
            hex
            # For 16KB the actual configuration is 32kb cache, but 16kb will be reserved for heap at startup
            default 0x8000 if ESP32S3_DATA_CACHE_16KB
            default 0x8000 if ESP32S3_DATA_CACHE_32KB
            default 0x10000 if ESP32S3_DATA_CACHE_64KB

        choice ESP32S3_DCACHE_ASSOCIATED_WAYS
            prompt "Data cache associated ways"
            default ESP32S3_DATA_CACHE_8WAYS
            help
                Data cache associated ways to be set on application startup.

            config ESP32S3_DATA_CACHE_4WAYS
                bool "4 ways"
            config ESP32S3_DATA_CACHE_8WAYS
                bool "8 ways"
        endchoice

        config ESP32S3_DCACHE_ASSOCIATED_WAYS
            int
            default 4 if ESP32S3_DATA_CACHE_4WAYS
            default 8 if ESP32S3_DATA_CACHE_8WAYS

        choice ESP32S3_DATA_CACHE_LINE_SIZE
            prompt "Data cache line size"
            default ESP32S3_DATA_CACHE_LINE_64B
            help
                Data cache line size to be set on application startup.

            config ESP32S3_DATA_CACHE_LINE_16B
                bool "16 Bytes"
                depends on ESP32S3_DATA_CACHE_16KB || ESP32S3_DATA_CACHE_32KB
            config ESP32S3_DATA_CACHE_LINE_32B
                bool "32 Bytes"
            config ESP32S3_DATA_CACHE_LINE_64B
                bool "64 Bytes"
        endchoice

        config ESP32S3_DATA_CACHE_LINE_SIZE
            int
            default 16 if ESP32S3_DATA_CACHE_LINE_16B
            default 32 if ESP32S3_DATA_CACHE_LINE_32B
            default 64 if ESP32S3_DATA_CACHE_LINE_64B

        config ESP32S3_DATA_CACHE_WRAP
            bool        ## TODO IDF-4307
            default "n"
            depends on !SPIRAM_ECC_ENABLE
            help
                If enabled, data cache will use wrap mode to read spi flash or spi ram.
                The wrap length equals to ESP32S3_DATA_CACHE_LINE_SIZE.
                However, it depends on complex conditions.
    endmenu
endmenu

menu "Compile options"
    choice COMPILER_OPTIMIZATION
        prompt "Optimization Level"
        default COMPILER_OPTIMIZATION_BASIC

        config COMPILER_OPTIMIZATION_NONE
            bool "-O0: none optimization"
        config COMPILER_OPTIMIZATION_BASIC
            bool "-O1: basic optimization"
        config COMPILER_OPTIMIZATION_PERF
            bool "-O2 performance optimization"
        config COMPILER_OPTIMIZATION_FULL
            bool "-O3 full optimization"
        config COMPILER_OPTIMIZATION_SIZE
            bool "-Os size optimization"
        config COMPILER_OPTIMIZATION_DEFAULT
            bool "-Og debug optimization"
    endchoice

    # choice COMPILER_FLOAT_LIB_FROM
    #     prompt "Compiler float lib source"
    #     default COMPILER_FLOAT_LIB_FROM_RVFPLIB if ESP_ROM_HAS_RVFPLIB
    #     default COMPILER_FLOAT_LIB_FROM_GCCLIB

    #     config COMPILER_FLOAT_LIB_FROM_GCCLIB
    #         bool "libgcc"
    #     config COMPILER_FLOAT_LIB_FROM_RVFPLIB
    #         depends on ESP_ROM_HAS_RVFPLIB
    #         bool "librvfp"
    # endchoice

    menuconfig COMPILER_CXX_EXCEPTIONS
        bool "Enable C++ exceptions"
        default y

    # config COMPILER_CXX_EXCEPTIONS_EMG_POOL_SIZE
    #     int "Emergency Pool Size"
    #     default 0
    #     depends on COMPILER_CXX_EXCEPTIONS
    #     help
    #         Size (in bytes) of the emergency memory pool for C++ exceptions. This pool will be used to allocate
    #         memory for thrown exceptions when there is not enough memory on the heap.

    config COMPILER_CXX_RTTI
        bool "Enable C++ run-time type info (RTTI)"
        default y

    choice COMPILER_STACK_CHECK_MODE
        prompt "Stack smashing protection mode"
        default COMPILER_STACK_CHECK_MODE_NONE
        help
            Stack smashing protection mode. Emit extra code to check for buffer overflows, such as stack
            smashing attacks. This is done by adding a guard variable to functions with vulnerable objects.
            The guards are initialized when a function is entered and then checked when the function exits.
            If a guard check fails, program is halted. Protection has the following modes:
            - In NORMAL mode (GCC flag: -fstack-protector) only functions that call alloca, and functions with
                buffers larger than 8 bytes are protected.
            - STRONG mode (GCC flag: -fstack-protector-strong) is like NORMAL, but includes additional functions
                to be protected -- those that have local array definitions, or have references to local frame
                addresses.
            - In OVERALL mode (GCC flag: -fstack-protector-all) all functions are protected.

            Modes have the following impact on code performance and coverage:
            - performance: NORMAL > STRONG > OVERALL
            - coverage: NORMAL < STRONG < OVERALL

            The performance impact includes increasing the amount of stack memory required for each task.

        config COMPILER_STACK_CHECK_MODE_NONE
            bool "None"
        config COMPILER_STACK_CHECK_MODE_NORM
            bool "Normal"
        config COMPILER_STACK_CHECK_MODE_STRONG
            bool "Strong"
        config COMPILER_STACK_CHECK_MODE_ALL
            bool "Overall"
    endchoice

    config COMPILER_STACK_CHECK
        bool
        default !COMPILER_STACK_CHECK_MODE_NONE
        help
            Stack smashing protection.

    config COMPILER_SAVE_RESTORE_LIBCALLS
        bool "Enable -msave-restore flag to reduce code size"
        depends on IDF_TARGET_ARCH_RISCV
        help
            Adds -msave-restore to C/C++ compilation flags.

            When this flag is enabled, compiler will call library functions to
            save/restore registers in function prologues/epilogues. This results
            in lower overall code size, at the expense of slightly reduced performance.

            This option can be enabled for RISC-V targets only.
endmenu

source "$COMPONENT_KCONFIGS_PROJBUILD_SOURCE_FILE"

menu "Component config"
    source "$COMPONENT_KCONFIGS_SOURCE_FILE"
endmenu
