#
# Please run the following command for opening a page with more information about this configuration file:
# idf.py docs -sp api-reference/kconfig.html
#
mainmenu "Espressif IoT Development Framework Configuration"

config BOOTLOADER_FLASH_XMC_SUPPORT
    # READ HELP FIRST...but none help we can got
    bool
    default y

config PARTITION_TABLE_OFFSET
    hex
    default 0x8000

config APP_RETRIEVE_LEN_ELF_SHA
    int
    default 16

config APP_BUILD_USE_FLASH_SECTIONS
    # always mapping flash for executing code / readonly data
    bool
    default y

config IDF_ENV_FPGA
    bool
    default n

# esp_attr.h: __attribute__((deprecated(REASON))) if this enables, set ALWAYS true
config IDF_CI_BUILD
    bool
    default y

config IDF_TARGET_ARCH_RISCV
    bool
    default "n"

config IDF_TARGET_ARCH_XTENSA
    bool
    default "n"

config IDF_TARGET_ARCH
    string
    default "riscv" if IDF_TARGET_ARCH_RISCV
    default "xtensa" if IDF_TARGET_ARCH_XTENSA

config IDF_TARGET
    string
    default "$IDF_TARGET"

config IDF_TARGET_LINUX
    bool
    default "y" if IDF_TARGET="linux"

config IDF_TARGET_ESP32
    bool
    default "y" if IDF_TARGET="esp32"
    select IDF_TARGET_ARCH_XTENSA

config IDF_TARGET_ESP32S2
    bool
    default "y" if IDF_TARGET="esp32s2"
    select IDF_TARGET_ARCH_XTENSA

config IDF_TARGET_ESP32S3
    bool
    default "y" if IDF_TARGET="esp32s3"
    select IDF_TARGET_ARCH_XTENSA

config IDF_TARGET_ESP32C3
    bool
    default "y" if IDF_TARGET="esp32c3"
    select IDF_TARGET_ARCH_RISCV

config IDF_TARGET_ESP32H4
    bool
    default "y" if IDF_TARGET="esp32h4"
    select IDF_TARGET_ARCH_RISCV

config IDF_TARGET_ESP32C2
    bool
    default "y" if IDF_TARGET="esp32c2"
    select IDF_TARGET_ARCH_RISCV

config IDF_TARGET_ESP32C6
    bool
    default "y" if IDF_TARGET="esp32c6"
    select IDF_TARGET_ARCH_RISCV

config IDF_TARGET_LINUX
    bool
    default "y" if IDF_TARGET="linux"

config IDF_FIRMWARE_CHIP_ID
    hex
    default 0x0000 if IDF_TARGET_ESP32
    default 0x0002 if IDF_TARGET_ESP32S2
    default 0x0005 if IDF_TARGET_ESP32C3
    default 0x0009 if IDF_TARGET_ESP32S3
    default 0x000A if IDF_TARGET_ESP32H4_BETA_VERSION_1
    default 0x000C if IDF_TARGET_ESP32C2
    default 0x000D if IDF_TARGET_ESP32C6
    default 0x000E if IDF_TARGET_ESP32H4_BETA_VERSION_2 # ESP32-TODO: IDF-3475
    default 0xFFFF

# orsource "$IDF_PATH/components/soc/$IDF_TARGET/include/soc/Kconfig.soc_caps.in"

menu "Compile options"
    choice COMPILER_OPTIMIZATION
        prompt "Optimization Level"
        default COMPILER_OPTIMIZATION_BASIC

        config COMPILER_OPTIMIZATION_NONE
            bool "-O0: none optimization"
        config COMPILER_OPTIMIZATION_BASIC
            bool "-O1: basic optimization"
        config COMPILER_OPTIMIZATION_PERF
            bool "-O2 performance optimization"
        config COMPILER_OPTIMIZATION_FULL
            bool "-O3 full optimization"
        config COMPILER_OPTIMIZATION_SIZE
            bool "-Os size optimization"
        config COMPILER_OPTIMIZATION_DEFAULT
            bool "-Og debug optimization"
    endchoice

    # choice COMPILER_FLOAT_LIB_FROM
    #     prompt "Compiler float lib source"
    #     default COMPILER_FLOAT_LIB_FROM_RVFPLIB if ESP_ROM_HAS_RVFPLIB
    #     default COMPILER_FLOAT_LIB_FROM_GCCLIB

    #     config COMPILER_FLOAT_LIB_FROM_GCCLIB
    #         bool "libgcc"
    #     config COMPILER_FLOAT_LIB_FROM_RVFPLIB
    #         depends on ESP_ROM_HAS_RVFPLIB
    #         bool "librvfp"
    # endchoice

    menuconfig COMPILER_CXX_EXCEPTIONS
        bool "Enable C++ exceptions"
        default y

    # config COMPILER_CXX_EXCEPTIONS_EMG_POOL_SIZE
    #     int "Emergency Pool Size"
    #     default 0
    #     depends on COMPILER_CXX_EXCEPTIONS
    #     help
    #         Size (in bytes) of the emergency memory pool for C++ exceptions. This pool will be used to allocate
    #         memory for thrown exceptions when there is not enough memory on the heap.

    config COMPILER_CXX_RTTI
        bool "Enable C++ run-time type info (RTTI)"
        default y

    choice COMPILER_STACK_CHECK_MODE
        prompt "Stack smashing protection mode"
        default COMPILER_STACK_CHECK_MODE_NONE
        help
            Stack smashing protection mode. Emit extra code to check for buffer overflows, such as stack
            smashing attacks. This is done by adding a guard variable to functions with vulnerable objects.
            The guards are initialized when a function is entered and then checked when the function exits.
            If a guard check fails, program is halted. Protection has the following modes:
            - In NORMAL mode (GCC flag: -fstack-protector) only functions that call alloca, and functions with
                buffers larger than 8 bytes are protected.
            - STRONG mode (GCC flag: -fstack-protector-strong) is like NORMAL, but includes additional functions
                to be protected -- those that have local array definitions, or have references to local frame
                addresses.
            - In OVERALL mode (GCC flag: -fstack-protector-all) all functions are protected.

            Modes have the following impact on code performance and coverage:
            - performance: NORMAL > STRONG > OVERALL
            - coverage: NORMAL < STRONG < OVERALL

            The performance impact includes increasing the amount of stack memory required for each task.

        config COMPILER_STACK_CHECK_MODE_NONE
            bool "None"
        config COMPILER_STACK_CHECK_MODE_NORM
            bool "Normal"
        config COMPILER_STACK_CHECK_MODE_STRONG
            bool "Strong"
        config COMPILER_STACK_CHECK_MODE_ALL
            bool "Overall"
    endchoice

    config COMPILER_STACK_CHECK
        bool
        default !COMPILER_STACK_CHECK_MODE_NONE
        help
            Stack smashing protection.
endmenu

source "$COMPONENT_KCONFIGS_PROJBUILD_SOURCE_FILE"

menu "Component config"
    source "$COMPONENT_KCONFIGS_SOURCE_FILE"
endmenu
