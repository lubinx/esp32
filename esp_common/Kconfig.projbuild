menu "Newlib"
    choice NEWLIB_STDOUT_LINE_ENDING
        prompt "Line ending for UART output"
        default NEWLIB_STDOUT_LINE_ENDING_CRLF
        help
            This option allows configuring the desired line endings sent to UART
            when a newline ('\n', LF) appears on stdout.
            Three options are possible:

            CRLF: whenever LF is encountered, prepend it with CR

            LF: no modification is applied, stdout is sent as is

            CR: each occurence of LF is replaced with CR

            This option doesn't affect behavior of the UART driver (drivers/uart.h).

        config NEWLIB_STDOUT_LINE_ENDING_CRLF
            bool "CRLF"
        config NEWLIB_STDOUT_LINE_ENDING_LF
            bool "LF"
        config NEWLIB_STDOUT_LINE_ENDING_CR
            bool "CR"
    endchoice

    choice NEWLIB_STDIN_LINE_ENDING
        prompt "Line ending for UART input"
        default NEWLIB_STDIN_LINE_ENDING_CR
        help
            This option allows configuring which input sequence on UART produces
            a newline ('\n', LF) on stdin.
            Three options are possible:

            CRLF: CRLF is converted to LF

            LF: no modification is applied, input is sent to stdin as is

            CR: each occurence of CR is replaced with LF

            This option doesn't affect behavior of the UART driver (drivers/uart.h).

        config NEWLIB_STDIN_LINE_ENDING_CRLF
            bool "CRLF"
        config NEWLIB_STDIN_LINE_ENDING_LF
            bool "LF"
        config NEWLIB_STDIN_LINE_ENDING_CR
            bool "CR"
    endchoice

    config NEWLIB_NANO_FORMAT
        bool "Enable 'nano' formatting options for printf/scanf family"
        default y if IDF_TARGET_ESP32C2
        help
            ESP32 ROM contains parts of newlib C library, including printf/scanf family
            of functions. These functions have been compiled with so-called "nano"
            formatting option. This option doesn't support 64-bit integer formats and C99
            features, such as positional arguments.

            For more details about "nano" formatting option, please see newlib readme file,
            search for '--enable-newlib-nano-formatted-io':
            https://sourceware.org/newlib/README

            If this option is enabled, build system will use functions available in
            ROM, reducing the application binary size. Functions available in ROM run
            faster than functions which run from flash. Functions available in ROM can
            also run when flash instruction cache is disabled.

            If you need 64-bit integer formatting support or C99 features, keep this
            option disabled.

    choice NEWLIB_TIME_SYSCALL
        prompt "Timers used for gettimeofday function"
        default NEWLIB_TIME_SYSCALL_USE_RTC_HRT
        help
            This setting defines which hardware timers are used to
            implement 'gettimeofday' and 'time' functions in C library.

            - If both high-resolution (systimer for all targets except ESP32)
                and RTC timers are used, timekeeping will continue in deep sleep.
                Time will be reported at 1 microsecond resolution.
                This is the default, and the recommended option.
            - If only high-resolution timer (systimer) is used, gettimeofday will
                provide time at microsecond resolution.
                Time will not be preserved when going into deep sleep mode.
            - If only RTC timer is used, timekeeping will continue in
                deep sleep, but time will be measured at 6.(6) microsecond
                resolution. Also the gettimeofday function itself may take
                longer to run.
            - If no timers are used, gettimeofday and time functions
                return -1 and set errno to ENOSYS.
            - When RTC is used for timekeeping, two RTC_STORE registers are
                used to keep time in deep sleep mode.

        config NEWLIB_TIME_SYSCALL_USE_RTC_HRT
            bool "RTC and high-resolution timer"
            select ESP_TIME_FUNCS_USE_RTC_TIMER
            select ESP_TIME_FUNCS_USE_ESP_TIMER
        config NEWLIB_TIME_SYSCALL_USE_RTC
            bool "RTC"
            select ESP_TIME_FUNCS_USE_RTC_TIMER
        config NEWLIB_TIME_SYSCALL_USE_HRT
            bool "High-resolution timer"
            select ESP_TIME_FUNCS_USE_ESP_TIMER
        config NEWLIB_TIME_SYSCALL_USE_NONE
            bool "None"
            select ESP_TIME_FUNCS_USE_NONE
    endchoice

    menu "PThreads"
        config PTHREAD_TASK_PRIO_DEFAULT
            int "Default task priority"
            range 0 255
            default 5
            help
                Priority used to create new tasks with default pthread parameters.

        config PTHREAD_TASK_STACK_SIZE_DEFAULT
            int "Default task stack size"
            default 3072
            help
                Stack size used to create new tasks with default pthread parameters.

        config PTHREAD_STACK_MIN
            int "Minimum allowed pthread stack size"
            default 768
            help
                Minimum allowed pthread stack size set in attributes passed to pthread_create

        choice PTHREAD_TASK_CORE_DEFAULT
            bool "Default pthread core affinity"
            default PTHREAD_DEFAULT_CORE_NO_AFFINITY
            depends on !FREERTOS_UNICORE
            help
                The default core to which pthreads are pinned.

            config PTHREAD_DEFAULT_CORE_NO_AFFINITY
                bool "No affinity"
            config PTHREAD_DEFAULT_CORE_0
                bool "Core 0"
            config PTHREAD_DEFAULT_CORE_1
                bool "Core 1"
        endchoice

        config PTHREAD_TASK_CORE_DEFAULT
            int
            default -1 if PTHREAD_DEFAULT_CORE_NO_AFFINITY || FREERTOS_UNICORE
            default 0 if PTHREAD_DEFAULT_CORE_0
            default 1 if PTHREAD_DEFAULT_CORE_1

        config PTHREAD_TASK_NAME_DEFAULT
            string "Default name of pthreads"
            default "pthread"
            help
                The default name of pthreads.
    endmenu
endmenu
